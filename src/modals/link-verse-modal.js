import { __awaiter } from "tslib";
import { Modal, Setting } from "obsidian";
import { createLinks } from "../logic/link-command";
export var LinkType;
(function (LinkType) {
    LinkType["Basic"] = "Basic";
    LinkType["Embedded"] = "Embedded";
    LinkType["Invisible"] = "Invisible";
})(LinkType || (LinkType = {}));
/**
 * Modal that lets you insert bible reference by using Obsidian links
 */
export default class LinkVerseModal extends Modal {
    constructor(app, settings, onSubmit) {
        super(app);
        this.handleInput = () => __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield createLinks(this.app, this.userInput, this.linkType, this.useNewLine, this.pluginSettings);
                this.close();
                this.onSubmit(res);
            }
            catch (err) {
                return;
            }
        });
        this.onSubmit = onSubmit;
        this.pluginSettings = settings;
        this.linkType = this.pluginSettings.linkTypePreset;
        this.useNewLine = this.pluginSettings.newLinePreset;
    }
    onOpen() {
        const { contentEl } = this;
        // Add heading
        contentEl.createEl("h3", {
            text: "Create Obsidian links from Bible reference",
        });
        // Add Textbox for reference
        new Setting(contentEl).setName("Insert reference").addText((text) => text
            .onChange((value) => {
            this.userInput = value;
        })
            .inputEl.focus()); // Sets focus to input field
        new Setting(contentEl).setName("Link type").addDropdown((dropdown) => {
            dropdown.addOption(LinkType.Basic, LinkType.Basic);
            dropdown.addOption(LinkType.Embedded, LinkType.Embedded);
            dropdown.addOption(LinkType.Invisible, LinkType.Invisible);
            dropdown.onChange((value) => (this.linkType = value));
            dropdown.setValue(this.pluginSettings.linkTypePreset);
        });
        new Setting(contentEl)
            .setName("Each link on new line?")
            .addToggle((tgl) => {
            tgl.setValue(this.pluginSettings.newLinePreset);
            tgl.onChange((val) => {
                this.useNewLine = val;
            });
        });
        // Add button for submit/exit
        new Setting(contentEl).addButton((btn) => {
            btn.setButtonText("Link").setCta().onClick(this.handleInput);
        });
        // Allow user to exit using Enter key
        contentEl.onkeydown = (event) => {
            if (event.key === "Enter") {
                event.preventDefault();
                this.handleInput();
            }
        };
    }
    onClose() {
        const { contentEl } = this;
        contentEl.empty();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluay12ZXJzZS1tb2RhbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxpbmstdmVyc2UtbW9kYWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBTyxLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRS9DLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUVwRCxNQUFNLENBQU4sSUFBWSxRQUlYO0FBSkQsV0FBWSxRQUFRO0lBQ25CLDJCQUFlLENBQUE7SUFDZixpQ0FBcUIsQ0FBQTtJQUNyQixtQ0FBdUIsQ0FBQTtBQUN4QixDQUFDLEVBSlcsUUFBUSxLQUFSLFFBQVEsUUFJbkI7QUFFRDs7R0FFRztBQUNILE1BQU0sQ0FBQyxPQUFPLE9BQU8sY0FBZSxTQUFRLEtBQUs7SUF1QmhELFlBQ0MsR0FBUSxFQUNSLFFBQXdCLEVBQ3hCLFFBQWtDO1FBRWxDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQXJCWixnQkFBVyxHQUFHLEdBQVMsRUFBRTtZQUN4QixJQUFJO2dCQUNILE1BQU0sR0FBRyxHQUFHLE1BQU0sV0FBVyxDQUM1QixJQUFJLENBQUMsR0FBRyxFQUNSLElBQUksQ0FBQyxTQUFTLEVBQ2QsSUFBSSxDQUFDLFFBQVEsRUFDYixJQUFJLENBQUMsVUFBVSxFQUNmLElBQUksQ0FBQyxjQUFjLENBQ25CLENBQUM7Z0JBQ0YsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNiLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDbkI7WUFBQyxPQUFPLEdBQUcsRUFBRTtnQkFDYixPQUFPO2FBQ1A7UUFDRixDQUFDLENBQUEsQ0FBQztRQVFELElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxjQUFjLEdBQUcsUUFBUSxDQUFDO1FBQy9CLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxjQUFjLENBQUM7UUFDbkQsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQztJQUNyRCxDQUFDO0lBRUQsTUFBTTtRQUNMLE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFFM0IsY0FBYztRQUNkLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFO1lBQ3hCLElBQUksRUFBRSw0Q0FBNEM7U0FDbEQsQ0FBQyxDQUFDO1FBRUgsNEJBQTRCO1FBQzVCLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQ25FLElBQUk7YUFDRixRQUFRLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNuQixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztRQUN4QixDQUFDLENBQUM7YUFDRCxPQUFPLENBQUMsS0FBSyxFQUFFLENBQ2pCLENBQUMsQ0FBQyw0QkFBNEI7UUFFL0IsSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ3BFLFFBQVEsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbkQsUUFBUSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN6RCxRQUFRLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzNELFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFpQixDQUFDLENBQUMsQ0FBQztZQUNsRSxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDdkQsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLE9BQU8sQ0FBQyxTQUFTLENBQUM7YUFDcEIsT0FBTyxDQUFDLHdCQUF3QixDQUFDO2FBQ2pDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQ2xCLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUNoRCxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7Z0JBQ3BCLElBQUksQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDO1lBQ3ZCLENBQUMsQ0FBQyxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7UUFFSiw2QkFBNkI7UUFDN0IsSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDeEMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzlELENBQUMsQ0FBQyxDQUFDO1FBRUgscUNBQXFDO1FBQ3JDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUMvQixJQUFJLEtBQUssQ0FBQyxHQUFHLEtBQUssT0FBTyxFQUFFO2dCQUMxQixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7Z0JBQ3ZCLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQzthQUNuQjtRQUNGLENBQUMsQ0FBQztJQUNILENBQUM7SUFFRCxPQUFPO1FBQ04sTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLElBQUksQ0FBQztRQUMzQixTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDbkIsQ0FBQztDQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwLCBNb2RhbCwgU2V0dGluZyB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyBQbHVnaW5TZXR0aW5ncyB9IGZyb20gXCIuLi9tYWluXCI7XHJcbmltcG9ydCB7IGNyZWF0ZUxpbmtzIH0gZnJvbSBcIi4uL2xvZ2ljL2xpbmstY29tbWFuZFwiO1xyXG5cclxuZXhwb3J0IGVudW0gTGlua1R5cGUge1xyXG5cdEJhc2ljID0gXCJCYXNpY1wiLFxyXG5cdEVtYmVkZGVkID0gXCJFbWJlZGRlZFwiLFxyXG5cdEludmlzaWJsZSA9IFwiSW52aXNpYmxlXCIsXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNb2RhbCB0aGF0IGxldHMgeW91IGluc2VydCBiaWJsZSByZWZlcmVuY2UgYnkgdXNpbmcgT2JzaWRpYW4gbGlua3NcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpbmtWZXJzZU1vZGFsIGV4dGVuZHMgTW9kYWwge1xyXG5cdHVzZXJJbnB1dDogc3RyaW5nO1xyXG5cdGxpbmtUeXBlOiBMaW5rVHlwZTtcclxuXHR1c2VOZXdMaW5lOiBib29sZWFuO1xyXG5cdG9uU3VibWl0OiAocmVzdWx0OiBzdHJpbmcpID0+IHZvaWQ7XHJcblx0cGx1Z2luU2V0dGluZ3M6IFBsdWdpblNldHRpbmdzO1xyXG5cclxuXHRoYW5kbGVJbnB1dCA9IGFzeW5jICgpID0+IHtcclxuXHRcdHRyeSB7XHJcblx0XHRcdGNvbnN0IHJlcyA9IGF3YWl0IGNyZWF0ZUxpbmtzKFxyXG5cdFx0XHRcdHRoaXMuYXBwLFxyXG5cdFx0XHRcdHRoaXMudXNlcklucHV0LFxyXG5cdFx0XHRcdHRoaXMubGlua1R5cGUsXHJcblx0XHRcdFx0dGhpcy51c2VOZXdMaW5lLFxyXG5cdFx0XHRcdHRoaXMucGx1Z2luU2V0dGluZ3NcclxuXHRcdFx0KTtcclxuXHRcdFx0dGhpcy5jbG9zZSgpO1xyXG5cdFx0XHR0aGlzLm9uU3VibWl0KHJlcyk7XHJcblx0XHR9IGNhdGNoIChlcnIpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdGNvbnN0cnVjdG9yKFxyXG5cdFx0YXBwOiBBcHAsXHJcblx0XHRzZXR0aW5nczogUGx1Z2luU2V0dGluZ3MsXHJcblx0XHRvblN1Ym1pdDogKHJlc3VsdDogc3RyaW5nKSA9PiB2b2lkXHJcblx0KSB7XHJcblx0XHRzdXBlcihhcHApO1xyXG5cdFx0dGhpcy5vblN1Ym1pdCA9IG9uU3VibWl0O1xyXG5cdFx0dGhpcy5wbHVnaW5TZXR0aW5ncyA9IHNldHRpbmdzO1xyXG5cdFx0dGhpcy5saW5rVHlwZSA9IHRoaXMucGx1Z2luU2V0dGluZ3MubGlua1R5cGVQcmVzZXQ7XHJcblx0XHR0aGlzLnVzZU5ld0xpbmUgPSB0aGlzLnBsdWdpblNldHRpbmdzLm5ld0xpbmVQcmVzZXQ7XHJcblx0fVxyXG5cclxuXHRvbk9wZW4oKSB7XHJcblx0XHRjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcclxuXHJcblx0XHQvLyBBZGQgaGVhZGluZ1xyXG5cdFx0Y29udGVudEVsLmNyZWF0ZUVsKFwiaDNcIiwge1xyXG5cdFx0XHR0ZXh0OiBcIkNyZWF0ZSBPYnNpZGlhbiBsaW5rcyBmcm9tIEJpYmxlIHJlZmVyZW5jZVwiLFxyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8gQWRkIFRleHRib3ggZm9yIHJlZmVyZW5jZVxyXG5cdFx0bmV3IFNldHRpbmcoY29udGVudEVsKS5zZXROYW1lKFwiSW5zZXJ0IHJlZmVyZW5jZVwiKS5hZGRUZXh0KCh0ZXh0KSA9PlxyXG5cdFx0XHR0ZXh0XHJcblx0XHRcdFx0Lm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0dGhpcy51c2VySW5wdXQgPSB2YWx1ZTtcclxuXHRcdFx0XHR9KVxyXG5cdFx0XHRcdC5pbnB1dEVsLmZvY3VzKClcclxuXHRcdCk7IC8vIFNldHMgZm9jdXMgdG8gaW5wdXQgZmllbGRcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250ZW50RWwpLnNldE5hbWUoXCJMaW5rIHR5cGVcIikuYWRkRHJvcGRvd24oKGRyb3Bkb3duKSA9PiB7XHJcblx0XHRcdGRyb3Bkb3duLmFkZE9wdGlvbihMaW5rVHlwZS5CYXNpYywgTGlua1R5cGUuQmFzaWMpO1xyXG5cdFx0XHRkcm9wZG93bi5hZGRPcHRpb24oTGlua1R5cGUuRW1iZWRkZWQsIExpbmtUeXBlLkVtYmVkZGVkKTtcclxuXHRcdFx0ZHJvcGRvd24uYWRkT3B0aW9uKExpbmtUeXBlLkludmlzaWJsZSwgTGlua1R5cGUuSW52aXNpYmxlKTtcclxuXHRcdFx0ZHJvcGRvd24ub25DaGFuZ2UoKHZhbHVlKSA9PiAodGhpcy5saW5rVHlwZSA9IHZhbHVlIGFzIExpbmtUeXBlKSk7XHJcblx0XHRcdGRyb3Bkb3duLnNldFZhbHVlKHRoaXMucGx1Z2luU2V0dGluZ3MubGlua1R5cGVQcmVzZXQpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0bmV3IFNldHRpbmcoY29udGVudEVsKVxyXG5cdFx0XHQuc2V0TmFtZShcIkVhY2ggbGluayBvbiBuZXcgbGluZT9cIilcclxuXHRcdFx0LmFkZFRvZ2dsZSgodGdsKSA9PiB7XHJcblx0XHRcdFx0dGdsLnNldFZhbHVlKHRoaXMucGx1Z2luU2V0dGluZ3MubmV3TGluZVByZXNldCk7XHJcblx0XHRcdFx0dGdsLm9uQ2hhbmdlKCh2YWwpID0+IHtcclxuXHRcdFx0XHRcdHRoaXMudXNlTmV3TGluZSA9IHZhbDtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0Ly8gQWRkIGJ1dHRvbiBmb3Igc3VibWl0L2V4aXRcclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRlbnRFbCkuYWRkQnV0dG9uKChidG4pID0+IHtcclxuXHRcdFx0YnRuLnNldEJ1dHRvblRleHQoXCJMaW5rXCIpLnNldEN0YSgpLm9uQ2xpY2sodGhpcy5oYW5kbGVJbnB1dCk7XHJcblx0XHR9KTtcclxuXHJcblx0XHQvLyBBbGxvdyB1c2VyIHRvIGV4aXQgdXNpbmcgRW50ZXIga2V5XHJcblx0XHRjb250ZW50RWwub25rZXlkb3duID0gKGV2ZW50KSA9PiB7XHJcblx0XHRcdGlmIChldmVudC5rZXkgPT09IFwiRW50ZXJcIikge1xyXG5cdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdFx0dGhpcy5oYW5kbGVJbnB1dCgpO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH1cclxuXHJcblx0b25DbG9zZSgpIHtcclxuXHRcdGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xyXG5cdFx0Y29udGVudEVsLmVtcHR5KCk7XHJcblx0fVxyXG59XHJcbiJdfQ==